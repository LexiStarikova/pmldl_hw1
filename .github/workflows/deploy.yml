name: Build and Deploy MNIST Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/mnist-api
  IMAGE_NAME_APP: ${{ github.repository }}/mnist-app

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REPO_NAME_LOWER: ${{ github.repository }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set lowercase repository name
      run: |
        echo "REPO_NAME_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.REPO_NAME_LOWER }}/mnist-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for App
      id: meta-app
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.REPO_NAME_LOWER }}/mnist-app
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./code/deployment/api/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push App image
      uses: docker/build-push-action@v5
      with:
        context: ./code/deployment/app
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-app.outputs.tags }}
        labels: ${{ steps.meta-app.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test API container
      run: |
        echo "Starting API container..."
        docker run --rm -d --name test-api -p 8000:8000 ${{ env.REGISTRY }}/${{ env.REPO_NAME_LOWER }}/mnist-api:latest

        echo "Waiting for API to start up (30 seconds)..."
        sleep 30

        echo "Checking container logs..."
        docker logs test-api

        echo "Checking API health..."
        for i in {1..5}; do
          echo "Attempt $i/5..."
          if curl -f http://localhost:8000/health; then
            echo "API health check passed!"
            break
          else
            echo "Health check failed, waiting 10 seconds..."
            sleep 10
          fi
        done

        echo "Stopping test container..."
        docker stop test-api

    - name: Test App container
      run: |
        echo "Starting Streamlit app container..."
        docker run --rm -d --name test-app -p 8501:8501 ${{ env.REGISTRY }}/${{ env.REPO_NAME_LOWER }}/mnist-app:latest

        echo "Waiting for Streamlit app to start up (20 seconds)..."
        sleep 20

        echo "Checking Streamlit app..."
        for i in {1..3}; do
          echo "Attempt $i/3..."
          if curl -f http://localhost:8501; then
            echo "Streamlit app check passed!"
            break
          else
            echo "App check failed, waiting 10 seconds..."
            sleep 10
          fi
        done

        echo "Stopping test container..."
        docker stop test-app

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: read
    env:
      REPO_NAME_LOWER: ${{ github.repository }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying MNIST Pipeline to production..."
        echo "API Image: ${{ env.REGISTRY }}/${{ env.REPO_NAME_LOWER }}/mnist-api:latest"
        echo "App Image: ${{ env.REGISTRY }}/${{ env.REPO_NAME_LOWER }}/mnist-app:latest"
        echo "Deployment completed successfully!"

        # Add your deployment commands here
        # Examples:
        # - Deploy to cloud platforms (AWS ECS, Google Cloud Run, Azure Container Instances)
        # - Update Kubernetes deployments
        # - Notify deployment status via Slack/Teams
        # - Run smoke tests against deployed services

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      security-events: write
    env:
      REPO_NAME_LOWER: ${{ github.repository }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set lowercase repository name
      run: |
        echo "REPO_NAME_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Run Trivy vulnerability scanner on API
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.REPO_NAME_LOWER }}/mnist-api:latest
        format: 'sarif'
        output: 'trivy-results-api.sarif'

    - name: Run Trivy vulnerability scanner on App
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.REPO_NAME_LOWER }}/mnist-app:latest
        format: 'sarif'
        output: 'trivy-results-app.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results-api.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results-app.sarif'
